
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { NewChecklist } from "@/types/checklist";
import { useAuth } from "@/components/AuthProvider";
import { AuthUser } from "@/hooks/auth/useAuthState";

// Fun√ß√£o para validar UUIDs
function isValidUUID(id: string | null | undefined): boolean {
  const uuidRegex =
    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return typeof id === "string" && uuidRegex.test(id);
}

export function useChecklistAI() {
  const [aiPrompt, setAiPrompt] = useState<string>("");
  const [numQuestions, setNumQuestions] = useState<number>(5);
  const [aiLoading, setAiLoading] = useState<boolean>(false);
  const { user, refreshSession } = useAuth();
  const typedUser = user as AuthUser | null;

  const generateAIChecklist = async (form: NewChecklist) => {
    try {
      setAiLoading(true);

      // üîÑ Atualiza a sess√£o para garantir um token v√°lido
      await refreshSession();

      // üîç Obt√©m a sess√£o atualizada
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();

      if (sessionError || !sessionData.session) {
        console.error("‚ùå Erro de sess√£o:", sessionError);
        toast.error("Sess√£o inv√°lida. Fa√ßa login novamente.");
        setAiLoading(false);
        return false;
      }

      console.log("üîπ Preparando requisi√ß√£o para IA:", {
        prompt: aiPrompt,
        num_questions: numQuestions,
        category: form.category || "general",
        user_id: typedUser?.id,
        company_id: form.company_id,
      });

      // ‚úÖ Garante que user_id est√° definido
      if (!form.user_id && typedUser?.id) {
        form.user_id = typedUser.id;
      }

      if (!isValidUUID(form.user_id)) {
        console.error("‚ùå ID do usu√°rio inv√°lido:", form.user_id);
        toast.error("Erro ao validar usu√°rio. Fa√ßa login novamente.");
        setAiLoading(false);
        return false;
      }

      if (form.company_id && !isValidUUID(form.company_id)) {
        console.warn("‚ö†Ô∏è ID da empresa inv√°lido ou indefinido. Continuando sem empresa...");
        form.company_id = null;
      }

      // üìå Criar checklist na base de dados
      const { data: checklist, error: checklistError } = await supabase
        .from("checklists")
        .insert({
          title: form.title || `Checklist: ${aiPrompt.substring(0, 50)}`,
          description: `Gerado por IA: ${aiPrompt}`,
          category: form.category || "general",
          user_id: form.user_id,
          company_id: form.company_id,
          status_checklist: "ativo",
          is_template: form.is_template || false,
        })
        .select()
        .single();

      if (checklistError || !checklist) {
        console.error("‚ùå Erro ao criar checklist:", checklistError);
        toast.error(`Erro ao criar checklist: ${checklistError.message}`);
        setAiLoading(false);
        return false;
      }

      if (!isValidUUID(checklist?.id)) {
        console.error("‚ùå ID do checklist inv√°lido retornado:", checklist?.id);
        toast.error("Erro inesperado ao criar checklist.");
        setAiLoading(false);
        return false;
      }

      console.log("‚úÖ Checklist criado com sucesso:", checklist.id);

      // üîπ Criar perguntas do checklist com base na categoria
      const questionTypes = ["sim/n√£o", "texto", "num√©rico", "sim/n√£o", "m√∫ltipla escolha"];
      const questions = [];
      const baseQuestions = {
        safety: [
          "Os EPIs est√£o sendo utilizados corretamente?",
          "Existem extintores de inc√™ndio em todos os locais necess√°rios?",
          "As rotas de evacua√ß√£o est√£o devidamente sinalizadas?",
          "Os funcion√°rios receberam treinamento adequado para emerg√™ncias?",
        ],
        quality: [
          "Os produtos atendem √†s especifica√ß√µes t√©cnicas?",
          "Existe um sistema de controle de qualidade implementado?",
          "Os instrumentos de medi√ß√£o est√£o calibrados?",
          "S√£o realizadas inspe√ß√µes peri√≥dicas nos produtos finais?",
        ],
        maintenance: [
          "Os equipamentos receberam manuten√ß√£o preventiva conforme cronograma?",
          "H√° registro de manuten√ß√µes corretivas recentes?",
          "As pe√ßas de reposi√ß√£o est√£o dispon√≠veis em estoque?",
          "Os manuais t√©cnicos est√£o acess√≠veis aos t√©cnicos?",
        ],
        environment: [
          "Os res√≠duos s√£o separados corretamente?",
          "Existe um sistema de tratamento de efluentes?",
          "As licen√ßas ambientais est√£o em dia?",
          "H√° medidas para redu√ß√£o de consumo de √°gua?",
        ],
        operational: [
          "Os procedimentos operacionais padr√£o (POPs) est√£o dispon√≠veis?",
          "Os funcion√°rios seguem as instru√ß√µes de trabalho?",
          "A produtividade est√° dentro das metas estabelecidas?",
          "H√° registros de paradas n√£o programadas?",
        ],
        general: [
          "A documenta√ß√£o est√° atualizada e organizada?",
          "O ambiente de trabalho est√° limpo e organizado?",
          "Os colaboradores possuem as ferramentas necess√°rias?",
          "Os processos est√£o documentados e acess√≠veis?",
        ],
      };

      const category = form.category as keyof typeof baseQuestions || "general";
      const categoryQuestions = baseQuestions[category] || baseQuestions.general;

      // Adicionar perguntas b√°sicas
      for (let i = 0; i < Math.min(categoryQuestions.length, numQuestions); i++) {
        questions.push({
          checklist_id: checklist.id,
          pergunta: categoryQuestions[i],
          tipo_resposta: "sim/n√£o",
          obrigatorio: true,
          ordem: i + 1,
        });
      }

      // Gerar perguntas adicionais
      const keywords = aiPrompt.toLowerCase().split(" ");
      for (let i = categoryQuestions.length; i < numQuestions; i++) {
        const questionType = questionTypes[i % questionTypes.length];
        const keyword = keywords[i % keywords.length] || "seguran√ßa";

        let pergunta = `Verificar condi√ß√µes de ${keyword}`;
        if (i % 3 === 0) pergunta += " conforme normas aplic√°veis";
        else if (i % 3 === 1) pergunta += " durante a opera√ß√£o";
        else pergunta += " no ambiente de trabalho";

        questions.push({
          checklist_id: checklist.id,
          pergunta,
          tipo_resposta: questionType,
          obrigatorio: i % 3 === 0,
          ordem: i + 1,
        });
      }

      // üìå Inserir perguntas no banco
      const { error: questionError } = await supabase
        .from("checklist_itens")
        .insert(questions);

      if (questionError) {
        console.error("‚ùå Erro ao inserir perguntas:", questionError);
        toast.error(`Erro ao adicionar perguntas: ${questionError.message}`);
      }

      toast.success(`Checklist gerado com sucesso! Revise antes de salvar.`);
      
      // Prepare the data for the editor - CORRECTED
      const checklistData = {
        ...form,
        id: checklist.id,
        title: checklist.title,
        description: checklist.description,
        category: checklist.category,
        is_template: checklist.is_template,
        status_checklist: checklist.status_checklist,
      };
      
      const formattedQuestions = questions.map(q => ({
        text: q.pergunta,
        type: q.tipo_resposta,
        required: q.obrigatorio,
      }));
      
      return {
        success: true,
        checklistId: checklist.id,
        checklistData: checklistData,
        questions: formattedQuestions,
        mode: "ai-review",
      };
    } catch (err) {
      console.error("‚ùå Erro ao gerar checklist:", err);
      toast.error("Erro ao gerar checklist. Tente novamente.");
      return false;
    } finally {
      setAiLoading(false);
    }
  };

  return {
    aiPrompt,
    setAiPrompt,
    numQuestions,
    setNumQuestions,
    aiLoading,
    generateAIChecklist,
  };
}
