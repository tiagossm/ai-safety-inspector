import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { NewChecklist } from "@/types/checklist";
import { useAuth } from "@/components/AuthProvider";
import { AuthUser } from "@/hooks/auth/useAuthState";

// Align this with the type in AIAssistantSelector.tsx
export type AIAssistantType = "general" | "workplace-safety" | "compliance" | "quality" | "openai" | "claude" | "gemini";

// Interface for groups of perguntas
interface QuestionGroup {
  id: string;
  title: string;
  questions: any[];
}

export function useChecklistAI() {
  const [aiPrompt, setAiPrompt] = useState<string>("");
  const [numQuestions, setNumQuestions] = useState<number>(5);
  const [aiLoading, setAiLoading] = useState<boolean>(false);
  const [selectedAssistant, setSelectedAssistant] = useState<AIAssistantType>("general");
  const [questionGroups, setQuestionGroups] = useState<QuestionGroup[]>([]);
  const { user, refreshSession } = useAuth();
  const typedUser = user as AuthUser | null;

  // Function to normalize response types according to the database constraints
  const normalizeResponseType = (type: string): string => {
    // Map of user-friendly types to database-compatible types
    const typeMap: Record<string, string> = {
      'sim/n√£o': 'yes_no',
      'm√∫ltipla escolha': 'multiple_choice',
      'num√©rico': 'numeric',
      'texto': 'text',
      'foto': 'photo',
      'assinatura': 'signature'
    };

    return typeMap[type] || 'text'; // Default to 'text' if not matched
  };

  // Get default category groups based on the selected assistant
  const getDefaultGroups = (assistantType: AIAssistantType): QuestionGroup[] => {
    let categories: string[] = [];
    
    switch (assistantType) {
      case "workplace-safety":
        categories = ["EPIs", "Ambiente de Trabalho", "Procedimentos", "Treinamentos"];
        break;
      case "compliance":
        categories = ["Documenta√ß√£o", "Processos", "Registros", "Auditorias"];
        break;
      case "quality":
        categories = ["Controle de Processo", "Inspe√ß√£o", "N√£o-conformidades", "Melhorias"];
        break;
      default:
        categories = ["Geral", "Espec√≠fico", "Opcional"];
    }
    
    return categories.map((title, index) => ({
      id: `group-${index + 1}`,
      title,
      questions: []
    }));
  };

  // Generate better questions based on assistant type
  const generateQuestionsForAssistant = (
    assistantType: AIAssistantType, 
    prompt: string, 
    numQuestions: number
  ): any[] => {
    const questions = [];
    const questionTypes = ["yes_no", "text", "numeric", "multiple_choice"];
    
    // Define templates based on assistant type
    const templates: Record<AIAssistantType, string[]> = {
      "workplace-safety": [
        "Os EPIs s√£o utilizados corretamente por todos os colaboradores?",
        "A sinaliza√ß√£o de seguran√ßa est√° em conformidade com a NR-26?",
        "Os equipamentos de combate a inc√™ndio est√£o devidamente sinalizados?",
        "As rotas de fuga est√£o desobstru√≠das?",
        "Os colaboradores receberam treinamento adequado para os riscos da atividade?",
        "As instala√ß√µes el√©tricas seguem as normas da NR-10?",
        "Os registros de acidentes est√£o atualizados?",
        "As √°reas de risco possuem acesso controlado?",
        "Os equipamentos possuem prote√ß√µes conforme NR-12?",
        "√â realizada a an√°lise preliminar de risco (APR) antes das atividades?"
      ],
      "compliance": [
        "A documenta√ß√£o legal est√° atualizada?",
        "Os registros obrigat√≥rios est√£o sendo mantidos pelo per√≠odo m√≠nimo exigido?",
        "As licen√ßas operacionais est√£o vigentes?",
        "As obriga√ß√µes trabalhistas est√£o sendo cumpridas?",
        "Existem desvios em rela√ß√£o aos procedimentos internos?",
        "As auditorias s√£o realizadas conforme cronograma?",
        "Os planos de a√ß√£o das n√£o-conformidades est√£o sendo executados?",
        "Os processos est√£o devidamente documentados?",
        "As pol√≠ticas internas s√£o divulgadas aos colaboradores?",
        "O canal de den√∫ncias est√° acess√≠vel a todos?"
      ],
      "quality": [
        "Os equipamentos de medi√ß√£o est√£o calibrados?",
        "As amostras s√£o coletadas conforme procedimento?",
        "O controle estat√≠stico de processo √© realizado?",
        "As n√£o-conformidades s√£o registradas e tratadas?",
        "Os indicadores de qualidade est√£o sendo monitorados?",
        "Os insumos s√£o verificados no recebimento?",
        "O produto final atende √†s especifica√ß√µes?",
        "As melhorias propostas s√£o implementadas?",
        "A rastreabilidade √© mantida ao longo do processo?",
        "Os colaboradores recebem treinamento cont√≠nuo?"
      ],
      "general": [
        "A documenta√ß√£o est√° atualizada e organizada?",
        "O ambiente de trabalho est√° limpo e organizado?",
        "Os colaboradores possuem as ferramentas necess√°rias?",
        "Os processos est√£o documentados e acess√≠veis?",
        "As reuni√µes de acompanhamento s√£o realizadas periodicamente?",
        "Os recursos est√£o sendo utilizados de forma eficiente?",
        "Os prazos est√£o sendo cumpridos?",
        "A comunica√ß√£o entre as equipes √© eficaz?",
        "O feedback dos clientes √© coletado e analisado?",
        "Os objetivos e metas est√£o claros para todos?"
      ]
    };
    
    // Get templates for the selected assistant
    const assistantTemplates = templates[assistantType] || templates.general;
    
    // Create questions based on the templates
    for (let i = 0; i < Math.min(assistantTemplates.length, numQuestions); i++) {
      const questionType = i % 3 === 0 ? "yes_no" : 
                          i % 3 === 1 ? "text" : 
                          "multiple_choice";
                          
      // Determine which group this question should go in
      const groupId = `group-${(i % 4) + 1}`;
      
      let options = null;
      if (questionType === "multiple_choice") {
        if (assistantType === "workplace-safety") {
          options = ["Conforme", "N√£o conforme", "Parcialmente conforme", "N√£o aplic√°vel"];
        } else if (assistantType === "compliance") {
          options = ["Atendido", "N√£o atendido", "Parcialmente atendido", "N√£o aplic√°vel"];
        } else if (assistantType === "quality") {
          options = ["Aprovado", "Reprovado", "Necessita ajustes", "N√£o verificado"];
        } else {
          options = ["Sim", "N√£o", "Parcialmente", "N√£o aplic√°vel"];
        }
      }
      
      questions.push({
        text: assistantTemplates[i],
        type: questionType === "yes_no" ? "sim/n√£o" : 
              questionType === "text" ? "texto" : 
              "m√∫ltipla escolha",
        required: i < (numQuestions / 2),
        options: options,
        groupId: groupId
      });
    }
    
    // Generate additional questions based on the prompt
    if (numQuestions > assistantTemplates.length) {
      const keywords = prompt.toLowerCase().split(" ");
      for (let i = assistantTemplates.length; i < numQuestions; i++) {
        const questionType = questionTypes[i % questionTypes.length];
        const keyword = keywords[i % keywords.length] || "processo";
        
        let text = "";
        
        // Generate question text based on assistant type and keywords
        if (assistantType === "workplace-safety") {
          text = `Verificar condi√ß√µes de seguran√ßa relacionadas a ${keyword}`;
        } else if (assistantType === "compliance") {
          text = `A documenta√ß√£o relativa a ${keyword} est√° em conformidade?`;
        } else if (assistantType === "quality") {
          text = `O processo de ${keyword} atende aos padr√µes de qualidade?`;
        } else {
          text = `Verificar ${keyword} conforme procedimento`;
        }
        
        // Determine which group this question should go in
        const groupId = `group-${(i % 4) + 1}`;
        
        let options = null;
        if (questionType === "multiple_choice") {
          options = ["Sim", "N√£o", "Parcialmente", "N√£o aplic√°vel"];
        }
        
        questions.push({
          text,
          type: questionType === "yes_no" ? "sim/n√£o" : 
                questionType === "text" ? "texto" : 
                questionType === "multiple_choice" ? "m√∫ltipla escolha" : 
                "num√©rico",
          required: i % 2 === 0,
          options,
          groupId
        });
      }
    }
    
    return questions;
  };

  const generateAIChecklist = async (form: NewChecklist) => {
    try {
      setAiLoading(true);

      // üîÑ Atualiza a sess√£o para garantir um token v√°lido
      await refreshSession();

      // üîç Obt√©m a sess√£o atualizada
      const sessionResponse = await supabase.auth.getSession();
      
      if (sessionResponse.error || !sessionResponse.data.session) {
        console.error("‚ùå Erro de sess√£o:", sessionResponse.error);
        toast.error("Sess√£o inv√°lida. Fa√ßa login novamente.");
        setAiLoading(false);
        return false;
      }

      // Log form details for debugging
      console.log("üîπ Preparando requisi√ß√£o para IA:", {
        prompt: aiPrompt,
        num_questions: numQuestions,
        category: form.category || "general",
        user_id: typedUser?.id,
        company_id: form.company_id,
      });

      // ‚úÖ Garante que user_id est√° definido
      if (!form.user_id && typedUser?.id) {
        form.user_id = typedUser.id;
      }

      if (!isValidUUID(form.user_id)) {
        console.error("‚ùå ID do usu√°rio inv√°lido:", form.user_id);
        toast.error("Erro ao validar usu√°rio. Fa√ßa login novamente.");
        setAiLoading(false);
        return false;
      }

      // Validate company_id if present
      if (form.company_id) {
        if (!isValidUUID(form.company_id)) {
          console.warn("‚ö†Ô∏è ID da empresa inv√°lido:", form.company_id);
          form.company_id = null;
        } else {
          // Verify the company exists before continuing
          const { data: companyData, error: companyError } = await supabase
            .from('companies')
            .select('id')
            .eq('id', form.company_id)
            .single();
            
          if (companyError || !companyData) {
            console.warn("‚ö†Ô∏è Empresa n√£o encontrada. Continuando sem empresa...");
            form.company_id = null;
          } else {
            console.log("‚úÖ Empresa validada:", companyData.id);
          }
        }
      }

      // üìå Criar checklist na base de dados
      const { data: checklist, error: checklistError } = await supabase
        .from("checklists")
        .insert({
          title: form.title || `Checklist: ${aiPrompt.substring(0, 50)}`,
          description: `Gerado por IA: ${aiPrompt}`,
          category: form.category || "general",
          user_id: form.user_id,
          company_id: form.company_id,
          status_checklist: "ativo",
          is_template: form.is_template || false,
        })
        .select()
        .single();

      if (checklistError || !checklist) {
        console.error("‚ùå Erro ao criar checklist:", checklistError);
        toast.error(`Erro ao criar checklist: ${checklistError?.message}`);
        setAiLoading(false);
        return false;
      }

      if (!isValidUUID(checklist?.id)) {
        console.error("‚ùå ID do checklist inv√°lido retornado:", checklist?.id);
        toast.error("Erro inesperado ao criar checklist.");
        setAiLoading(false);
        return false;
      }

      console.log("‚úÖ Checklist criado com sucesso:", checklist.id);

      // Generate questions based on the assistant type
      const questions = generateQuestionsForAssistant(
        selectedAssistant,
        aiPrompt,
        numQuestions
      );
      
      // Create default question groups
      const defaultGroups = getDefaultGroups(selectedAssistant);
      
      // Organize questions into their groups
      const groupedQuestions = defaultGroups.map(group => {
        const groupQuestions = questions.filter(q => q.groupId === group.id);
        return {
          ...group,
          questions: groupQuestions
        };
      });
      
      // üîπ Inserir perguntas no banco
      const dbQuestions = questions.map((q, idx) => {
        // Validate and structure the question for database insertion
        if (!q.text || !q.type) {
          console.warn(`‚ö†Ô∏è Pulando pergunta ${idx + 1} pois est√° incompleta:`, q);
          return null;
        }
        
        // Ensure proper type mapping
        const dbType = normalizeResponseType(q.type);
        
        // For multiple choice, ensure options exist
        if (dbType === 'multiple_choice' && (!q.options || !Array.isArray(q.options) || q.options.length === 0)) {
          console.warn(`‚ö†Ô∏è Adicionando op√ß√µes padr√£o para pergunta de m√∫ltipla escolha ${idx + 1}:`, q.text);
          q.options = ["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3"];
        }
        
        return {
          checklist_id: checklist.id,
          pergunta: q.text,
          tipo_resposta: dbType,
          obrigatorio: q.required,
          ordem: idx + 1,
          opcoes: q.options,
          // Store group info in the hint field as JSON
          hint: JSON.stringify({
            groupId: q.groupId,
            groupTitle: defaultGroups.find(g => g.id === q.groupId)?.title || 'Geral',
            groupIndex: defaultGroups.findIndex(g => g.id === q.groupId)
          })
        };
      }).filter(Boolean); // Remove any null entries

      // Log the questions being created to help with debugging
      console.log("Inserting questions with these types:", dbQuestions.map(q => q.tipo_resposta));

      if (dbQuestions.length === 0) {
        console.warn("‚ö†Ô∏è Nenhuma pergunta v√°lida para inserir");
        toast.warning("N√£o foi poss√≠vel gerar perguntas v√°lidas. Verifique o prompt.");
      } else {
        // üìå Inserir perguntas no banco
        const { error: questionError } = await supabase
          .from("checklist_itens")
          .insert(dbQuestions);

        if (questionError) {
          console.error("‚ùå Erro ao inserir perguntas:", questionError);
          toast.error(`Erro ao adicionar perguntas: ${questionError.message}`);
        } else {
          console.log("‚úÖ Perguntas inseridas com sucesso:", dbQuestions.length);
        }
      }

      toast.success(`Checklist gerado com sucesso! Revise antes de salvar.`);
      
      // Prepare the data for the editor - with UI-friendly response types
      const checklistData = {
        ...form,
        id: checklist.id,
        title: checklist.title,
        description: checklist.description,
        category: checklist.category,
        is_template: checklist.is_template,
        status_checklist: checklist.status_checklist,
      };
      
      // Update the state of groups
      setQuestionGroups(groupedQuestions);
      
      return {
        success: true,
        checklistId: checklist.id,
        checklistData: checklistData,
        questions: questions,
        groups: groupedQuestions,
        mode: "ai-review",
      };
    } catch (err) {
      console.error("‚ùå Erro ao gerar checklist:", err);
      toast.error("Erro ao gerar checklist. Tente novamente.");
      return false;
    } finally {
      setAiLoading(false);
    }
  };

  // Fun√ß√£o para validar UUIDs
  function isValidUUID(id: string | null | undefined): boolean {
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    return typeof id === "string" && uuidRegex.test(id);
  }

  return {
    aiPrompt,
    setAiPrompt,
    numQuestions,
    setNumQuestions,
    aiLoading,
    selectedAssistant,
    setSelectedAssistant,
    questionGroups,
    setQuestionGroups,
    generateAIChecklist,
    getDefaultGroups
  };
}
