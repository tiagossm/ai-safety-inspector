import { useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "./ui/use-toast";

const SessionChecker = ({ children }: { children: React.ReactNode }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [sessionChecked, setSessionChecked] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  const { toast } = useToast();

  useEffect(() => {
    console.log("‚úÖ SessionChecker iniciado...");

    const checkSession = async () => {
      try {
        console.log("üîç Verificando sess√£o do usu√°rio...");
        setIsLoading(true);
        
        // Obt√©m a sess√£o atual
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error("‚ùå Erro ao verificar sess√£o:", error);
          toast({
            title: "Erro de autentica√ß√£o",
            description: "N√£o foi poss√≠vel verificar sua sess√£o",
            variant: "destructive",
          });
          navigate("/auth");
          setIsLoading(false);
          setSessionChecked(true);
          return;
        }

        console.log("‚úÖ Sess√£o verificada:", session ? "V√°lida" : "Inv√°lida");
        
        if (!session) {
          console.warn("‚ö†Ô∏è Usu√°rio n√£o autenticado, redirecionando para login...");
          if (location.pathname !== "/auth") {
            navigate("/auth");
          }
          setIsLoading(false);
          setSessionChecked(true);
          return;
        }

        // Obt√©m os dados do usu√°rio autenticado
        if (session?.user) {
          console.log("üîç Obtendo dados do usu√°rio...");

          const { data: userData, error: userError } = await supabase
            .from("users")
            .select("role, tier")
            .eq("id", session.user.id)
            .maybeSingle();
          
          if (userError) {
            console.error("‚ùå Erro ao obter dados do usu√°rio:", userError);
            setIsLoading(false);
            setSessionChecked(true);
            return;
          }
          
          const userTier = userData?.tier || "technician"; // Define "technician" como padr√£o
          console.log("‚úÖ Perfil do usu√°rio:", userTier);
          
          // Verifica se a rota √© a inicial para evitar redirecionamento em p√°ginas protegidas
          if (location.pathname === "/" || location.pathname === "/auth") {
            console.log("üîÑ Redirecionando com base no perfil do usu√°rio...");
            if (userTier === "super_admin") {
              console.log("üöÄ Redirecionando para dashboard de administrador...");
              navigate("/admin/dashboard");
            } else {
              console.log("‚úÖ Redirecionando para dashboard padr√£o...");
              navigate("/dashboard");
            }
          } else {
            console.log("‚úÖ Usu√°rio j√° est√° em uma rota protegida:", location.pathname);
          }
        }

        setIsLoading(false);
        setSessionChecked(true);
      } catch (err) {
        console.error("‚ùå Erro inesperado ao verificar sess√£o:", err);
        toast({
          title: "Erro",
          description: "Ocorreu um erro ao verificar seu login",
          variant: "destructive",
        });
        navigate("/auth");
        setIsLoading(false);
        setSessionChecked(true);
      }
    };

    // Verifica a sess√£o apenas se ainda n√£o foi verificada
    if (!sessionChecked) {
      checkSession();
    }
    
    // Monitoramento do estado de autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log("üîÑ Estado de autentica√ß√£o alterado:", event);
      
      if (event === "SIGNED_IN") {
        console.log("‚úÖ Usu√°rio autenticado com sucesso, verificando perfil...");
        setIsLoading(true);
        setSessionChecked(false);
      } else if (event === "SIGNED_OUT") {
        console.warn("‚ö†Ô∏è Usu√°rio desconectado, redirecionando para login...");
        navigate("/auth");
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [navigate, toast, sessionChecked, location.pathname]);

  // Renderiza o estado de carregamento ou o conte√∫do da aplica√ß√£o
  if (isLoading && !sessionChecked) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-lg">Carregando...</p>
        </div>
      </div>
    );
  }

  return <>{children}</>;
};
s
export default SessionChecker;
