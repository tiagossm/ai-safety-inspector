
import { useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

const SessionChecker = ({ children }: { children: React.ReactNode }) => {
  const [isInitialized, setIsInitialized] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();
  const location = useLocation();
  
  useEffect(() => {
    console.log("‚úÖ SessionChecker montado (URL atual:", location.pathname, ")");
    
    // Fun√ß√£o para verificar se um caminho √© p√∫blico
    const isPublicPath = (path: string): boolean => {
      return path === "/" || 
             path === "/auth" ||
             path === "/plans" || 
             path === "/blog" || 
             path === "/contact" ||
             path.startsWith("/public/");
    };
    
    // Fun√ß√£o para verificar a sess√£o atual
    const checkSession = async () => {
      try {
        console.log("üîç Tentando obter sess√£o do usu√°rio...");
        
        // Obt√©m a sess√£o atual
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error("‚ùå Erro ao verificar sess√£o:", error);
          
          // Check if the error is related to API keys
          if (error.message.includes('Invalid API key')) {
            toast.error("Erro de configura√ß√£o do servidor", {
              description: "Por favor, tente novamente em alguns instantes ou contate o suporte."
            });
          } else {
            toast.error("N√£o foi poss√≠vel verificar sua sess√£o", {
              description: error.message
            });
          }
          
          if (!isPublicPath(location.pathname)) {
            navigate("/auth");
          }
          
          setIsLoading(false);
          setIsInitialized(true);
          return;
        }
        
        const session = data.session;
        console.log("‚ÑπÔ∏è Status da sess√£o:", session ? "Autenticado" : "N√£o autenticado");
        
        // Verificar se a sess√£o est√° expirada
        if (session && session.expires_at) {
          const expiresAt = new Date(session.expires_at * 1000);
          if (expiresAt < new Date()) {
            console.log("‚ö†Ô∏è Sess√£o expirada, redirecionando para login");
            await supabase.auth.signOut();
            if (!isPublicPath(location.pathname)) {
              navigate("/auth");
              toast.error("Sua sess√£o expirou. Por favor, fa√ßa login novamente.");
            }
          }
        }
        
        // Se n√£o houver sess√£o e n√£o estiver em uma rota p√∫blica, redirecione para /auth
        if (!session && !isPublicPath(location.pathname)) {
          console.log("üîÑ Redirecionando para tela de login");
          navigate("/auth");
        }
        
        setIsLoading(false);
        setIsInitialized(true);
      } catch (error) {
        console.error("‚ùå Erro inesperado:", error);
        toast.error("Erro ao verificar sess√£o", {
          description: "Ocorreu um erro inesperado. Tente novamente."
        });
        setIsLoading(false);
        setIsInitialized(true);
        
        if (!isPublicPath(location.pathname)) {
          navigate("/auth");
        }
      }
    };
    
    // Apenas execute a verifica√ß√£o se o componente n√£o estiver inicializado
    if (!isInitialized) {
      checkSession();
    }
    
    // Configurar listener para mudan√ßas de autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log("üîÑ Estado de autentica√ß√£o alterado:", event);
      
      if (event === "SIGNED_IN") {
        console.log("‚úÖ Usu√°rio acabou de autenticar-se");
        
        // Se estiver na p√°gina de auth, redirecione para o dashboard
        if (location.pathname === "/auth") {
          navigate("/dashboard");
        }
      } else if (event === "SIGNED_OUT") {
        console.log("‚ÑπÔ∏è Usu√°rio desconectado");
        navigate("/auth");
      } else if (event === "TOKEN_REFRESHED") {
        console.log("‚ôªÔ∏è Token atualizado com sucesso");
      } else if (event === "USER_UPDATED") {
        console.log("üìù Dados do usu√°rio atualizados");
      }
      
      setIsLoading(false);
      setIsInitialized(true);
    });
    
    return () => {
      console.log("üîÑ Desmontando SessionChecker");
      subscription.unsubscribe();
    };
  }, [navigate, location.pathname, isInitialized]);
  
  // Enquanto estiver carregando, mostre um indicador
  if (isLoading && !isInitialized) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-lg">Inicializando aplica√ß√£o...</p>
        </div>
      </div>
    );
  }
  
  // Renderiza os filhos quando estiver pronto
  return <>{children}</>;
};

export default SessionChecker;
